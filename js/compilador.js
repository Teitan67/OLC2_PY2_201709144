/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compilador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[2,6],$V2=[1,7],$V3=[1,32],$V4=[1,25],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,33],$Vd=[2,5,10,11,40,75,76,77,84,86,89,90,91],$Ve=[2,5,10,11,16,40,75,76,77,84,86,89,90,91],$Vf=[14,25],$Vg=[1,54],$Vh=[1,55],$Vi=[1,60],$Vj=[1,70],$Vk=[1,69],$Vl=[2,86],$Vm=[1,83],$Vn=[1,75],$Vo=[1,85],$Vp=[1,81],$Vq=[1,82],$Vr=[1,73],$Vs=[1,79],$Vt=[1,80],$Vu=[1,91],$Vv=[1,112],$Vw=[1,117],$Vx=[2,88],$Vy=[1,120],$Vz=[1,122],$VA=[1,123],$VB=[1,124],$VC=[1,127],$VD=[1,128],$VE=[14,20,25,57,59,60],$VF=[14,20,25,57,59,60,69,70],$VG=[69,70],$VH=[2,78],$VI=[1,136],$VJ=[1,137],$VK=[1,138],$VL=[1,139],$VM=[1,140],$VN=[1,141],$VO=[1,132],$VP=[1,133],$VQ=[1,134],$VR=[1,135],$VS=[14,20,25,49,50,51,52,53,54,57,59,60,64,65,66,67,69,70],$VT=[14,20,25,57,69,70],$VU=[1,157],$VV=[14,20,25,69,70],$VW=[14,20,25],$VX=[11,12,47,48,50,61,71,72],$VY=[97,98],$VZ=[14,15,20,25,56,83],$V_=[1,181],$V$=[14,20,25,49,50,57,59,60,64,65,66,67,69,70],$V01=[2,19],$V11=[14,20,25,49,50,51,52,57,59,60,64,65,66,67,69,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"PROGRAMA":3,"PROGRAMA_ESTRUCTURA":4,"EOF":5,"FUNCIONES":6,"PROGRAMA_RECOLECTADO":7,"LSENTENCIAS":8,"FUNCION":9,"function":10,"id":11,"pa":12,"PARAMETROS":13,"pc":14,"lla":15,"llc":16,"VARIABLES_TIPO":17,"dspts":18,"void":19,"cm":20,"SENTENCIAS":21,"INST_CONSOLA":22,"INST_CREAR_VARIABLES":23,"INST_ASIGNAR_VARIABLES":24,"eos":25,"INST_GRAFICADOR":26,"INST_IF":27,"INST_WHILE":28,"INST_DO_WHILE":29,"INST_INCREMENTO":30,"INST_FOR":31,"INST_CREAR_ARREGLO":32,"INST_ASIGNAR_ARREGLO":33,"INST_PUSH":34,"INST_FOR_IN":35,"INST_FOR_OF":36,"INST_FUNCION_LLAMADA":37,"PARAMETRO_ENTRADA":38,"DATO":39,"console":40,"pt":41,"log":42,"DATO_CONSOL":43,"EXP_CADENA":44,"EXP_NUMERICA":45,"CONDICION":46,"cadena":47,"numero":48,"mas":49,"menos":50,"por":51,"div":52,"potenciar":53,"modular":54,"length":55,"ca":56,"cc":57,"pop":58,"and":59,"or":60,"not":61,"COMPARACION":62,"DATO_BOOLEANO":63,"menor":64,"mayor":65,"menorIgual":66,"mayorIgual":67,"DATO_COMPARACION":68,"mismo":69,"diferente":70,"false":71,"true":72,"VARIABLES_ACCESO":73,"VARIABLES_CUERPO":74,"let":75,"var":76,"const":77,"VARIABLES_ASIGNACION":78,"TIPO_DATO":79,"boolean":80,"string":81,"number":82,"igual":83,"graficar_ts":84,"ASIGNACION":85,"if":86,"ELSE":87,"else":88,"while":89,"do":90,"for":91,"FOR_ASIGNACION":92,"FOR_AUMENTO":93,"ARREGLO_DATOS":94,"push":95,"FOR_IN_ASIGNACION":96,"in":97,"of":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"function",11:"id",12:"pa",14:"pc",15:"lla",16:"llc",18:"dspts",19:"void",20:"cm",25:"eos",40:"console",41:"pt",42:"log",47:"cadena",48:"numero",49:"mas",50:"menos",51:"por",52:"div",53:"potenciar",54:"modular",55:"length",56:"ca",57:"cc",58:"pop",59:"and",60:"or",61:"not",64:"menor",65:"mayor",66:"menorIgual",67:"mayorIgual",69:"mismo",70:"diferente",71:"false",72:"true",75:"let",76:"var",77:"const",80:"boolean",81:"string",82:"number",83:"igual",84:"graficar_ts",86:"if",88:"else",89:"while",90:"do",91:"for",95:"push",97:"in",98:"of"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[7,0],[6,2],[6,1],[9,8],[9,7],[9,9],[9,10],[9,8],[9,9],[13,4],[13,3],[13,1],[13,2],[13,0],[8,2],[8,1],[21,1],[21,1],[21,2],[21,1],[21,1],[21,1],[21,1],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,2],[37,5],[37,4],[38,3],[38,1],[22,7],[43,1],[43,3],[43,1],[43,1],[39,1],[39,1],[39,1],[44,1],[45,1],[45,3],[45,3],[45,3],[45,3],[45,2],[45,3],[45,3],[45,1],[45,3],[45,3],[45,4],[45,5],[46,3],[46,3],[46,2],[46,1],[46,3],[46,1],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[68,1],[68,1],[68,1],[63,1],[63,1],[23,3],[73,1],[73,1],[73,1],[74,1],[74,2],[74,2],[74,3],[74,3],[74,4],[74,4],[74,5],[17,2],[79,1],[79,1],[79,1],[78,2],[26,4],[24,1],[85,2],[85,4],[27,7],[27,8],[87,2],[87,4],[28,7],[29,8],[30,3],[30,3],[31,10],[92,1],[92,2],[93,1],[93,1],[32,5],[32,6],[32,9],[32,10],[94,3],[94,1],[33,7],[34,7],[35,9],[96,2],[96,1],[36,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return instruccionesAST.nuevoPrograma($$[$0-1]);
break;
case 2:
$$[$0].unshift($$[$0-1]); this.$=$$[$0];
break;
case 3: case 22: case 23: case 25: case 26: case 27: case 28: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 112: case 114: case 115:
this.$=$$[$0];
break;
case 4:
$$[$0].unshift($$[$0-2]); $$[$0].unshift($$[$0-1]); this.$=$$[$0];
break;
case 5: case 8: case 42:
this.$=[$$[$0]];
break;
case 6: case 19:
this.$=[];
break;
case 7:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 9:
this.$=instruccionesAST.nuevaFuncionCreada($$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 10:
this.$=instruccionesAST.nuevaFuncionCreada($$[$0-5],[],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 11:
this.$=instruccionesAST.nuevaFuncionCreada($$[$0-7],$$[$0-5],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 12:
this.$=instruccionesAST.nuevaFuncionCreada($$[$0-8],$$[$0-6],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 13:
this.$=instruccionesAST.nuevaFuncionCreada($$[$0-6],[],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 14:
this.$=instruccionesAST.nuevaFuncionCreada($$[$0-7],[],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 15:
$$[$0].push(instruccionesAST.nuevoParametro($$[$0-3],$$[$0-2])); this.$=$$[$0];
break;
case 16:
$$[$0].push(instruccionesAST.nuevoParametro($$[$0-2],null)); this.$=$$[$0];
break;
case 17:
this.$=[instruccionesAST.nuevoParametro($$[$0],null)];
break;
case 18:
this.$=[instruccionesAST.nuevoParametro($$[$0-1],$$[$0])];
break;
case 20:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 21:
 this.$ = [$$[$0]]; 
break;
case 24: case 29: case 113:
this.$=$$[$0-1];
break;
case 37: case 38:
this.$=instruccionesAST.saltoError(); reportarError("Sintactico", "Linea mal escrita:<br>"+editor.getLine(this._$.first_line-1), this._$.first_column, this._$.first_line-1);
break;
case 39:
this.$=instruccionesAST.nuevaFuncionLlamada($$[$0-4],$$[$0-2],this._$.first_line-1,this._$.first_column);
break;
case 40:
this.$=instruccionesAST.nuevaFuncionLlamada($$[$0-3],[],this._$.first_line-1,this._$.first_column);
break;
case 41:
$$[$0].push($$[$0-2]); this.$=$$[$0];
break;
case 43:
 this.$ = instruccionesAST.nuevoImprimir($$[$0-2]);
break;
case 44: case 46: case 47: case 48: case 49: case 50: case 70: case 77: case 78: case 79:
 this.$ = $$[$0]; 
break;
case 45:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.CONCATENACION);
break;
case 51:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.CADENA);
break;
case 52:
 this.$ = instruccionesAST.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 53:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA);
break;
case 54:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA);
break;
case 55:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION);
break;
case 56:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION);
break;
case 57:
 this.$ = instruccionesAST.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 58:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA);
break;
case 59:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULAR);
break;
case 60:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR)
break;
case 61: case 69:
 this.$ = $$[$0-1];
break;
case 62:
 this.$ = instruccionesAST.nuevoLength($$[$0-2]);
break;
case 63:
 this.$ = instruccionesAST.nuevoValorArreglo($$[$0-3],$$[$0-1], TIPO_VALOR.ARREGLO,this._$.first_line-1,this._$.first_column);
break;
case 64:
 this.$ = instruccionesAST.nuevoPop($$[$0-4], TIPO_VALOR.POP,this._$.first_line-1,this._$.first_column);
break;
case 65:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND);
break;
case 66:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR);
break;
case 67:
 this.$ = instruccionesAST.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NEGACION);
break;
case 68: case 94: case 95: case 96: case 97: case 98: case 125: case 126:
 this.$ = $$[$0];
break;
case 71:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE);
break;
case 72:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE);
break;
case 73:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL);
break;
case 74:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL);
break;
case 75:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUAL);
break;
case 76:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIFERENTE);
break;
case 80: case 81:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.BOOLEANO);
break;
case 82:
 this.$ = instruccionesAST.nuevaVariable($$[$0-2],$$[$0-1]); 
break;
case 83: case 84: case 85: case 105:
this.$ = $$[$0];
break;
case 86:
 this.$ = [ instruccionesAST.crearVariable($$[$0],null,null,this._$.first_line-1,this._$.first_column) ];
break;
case 87:
 this.$ = [ instruccionesAST.crearVariable($$[$0-1],null,$$[$0],this._$.first_line-1,this._$.first_column) ];
break;
case 88:
 this.$ = [ instruccionesAST.crearVariable($$[$0-1],$$[$0],null,this._$.first_line-1,this._$.first_column) ];
break;
case 89:
 this.$ = [ instruccionesAST.crearVariable($$[$0-2],$$[$0-1],$$[$0],this._$.first_line-1,this._$.first_column) ];
break;
case 90:
 $$[$0].unshift(instruccionesAST.crearVariable($$[$0-2],null,null,this._$.first_line-1,this._$.first_column)); this.$ = $$[$0];
break;
case 91:
 $$[$0].unshift(instruccionesAST.crearVariable($$[$0-3],null,$$[$0-2],this._$.first_line-1,this._$.first_column)); this.$ = $$[$0];
break;
case 92:
 $$[$0].unshift(instruccionesAST.crearVariable($$[$0-3],$$[$0-2],null,this._$.first_line-1,this._$.first_column)); this.$ = $$[$0];
break;
case 93:
 $$[$0].unshift(instruccionesAST.crearVariable($$[$0-4],$$[$0-3],$$[$0-2],this._$.first_line-1,this._$.first_column)); this.$ = $$[$0];
break;
case 99:
 this.$ = instruccionesAST.graficar_ts(); 
break;
case 100:
 this.$ = instruccionesAST.nuevasAsignaciones($$[$0]);
break;
case 101:
 this.$ = [instruccionesAST.nuevaAsignacion($$[$0-1],$$[$0],this._$.first_line-1,this._$.first_column)];
break;
case 102:
 $$[$0].push(instruccionesAST.nuevaAsignacion($$[$0-3],$$[$0-2],this._$.first_line-1,this._$.first_column)); this.$ = $$[$0];
break;
case 103:
 this.$ = instruccionesAST.nuevoIf($$[$0-4],$$[$0-1],"null");
break;
case 104:
 this.$ = instruccionesAST.nuevoIf($$[$0-5],$$[$0-2],$$[$0])
break;
case 106:
this.$ = instruccionesAST.nuevoElse($$[$0-1]);
break;
case 107:
 this.$ = instruccionesAST.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 108:
 this.$ = instruccionesAST.nuevoDoWhile($$[$0-1],$$[$0-5]);
break;
case 109:
 this.$ = instruccionesAST.nuevoIncremento($$[$0-2]);
break;
case 110:
 this.$ = instruccionesAST.nuevoDecremento($$[$0-2]);
break;
case 111:
this.$ = instruccionesAST.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 116:
this.$=instruccionesAST.nuevoArreglo($$[$0-4],$$[$0-3],null,[],this._$.first_line-1,this._$.first_column);
break;
case 117:
this.$=instruccionesAST.nuevoArreglo($$[$0-5],$$[$0-4],$$[$0-3],[],this._$.first_line-1,this._$.first_column);
break;
case 118:
this.$=instruccionesAST.nuevoArreglo($$[$0-8],$$[$0-7],null,$$[$0-2],this._$.first_line-1,this._$.first_column);
break;
case 119:
this.$=instruccionesAST.nuevoArreglo($$[$0-9],$$[$0-8],$$[$0-7],$$[$0-2],this._$.first_line-1,this._$.first_column);
break;
case 120:
 $$[$0].unshift($$[$0-2]); this.$ = $$[$0];
break;
case 121:
 this.$ = [$$[$0]];
break;
case 122:
 this.$ = instruccionesAST.nuevaAsignacionArreglo($$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 123:
 this.$ = instruccionesAST.nuevoPush($$[$0-6],$$[$0-2]);
break;
case 124:
 this.$ =instruccionesAST.nuevoForIn($$[$0-6],$$[$0-4],$$[$0-1]) ;
break;
case 127:
 this.$ =instruccionesAST.nuevoForOf($$[$0-6],$$[$0-4],$$[$0-1]) ;
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,8:6,9:5,10:$V2,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{1:[3]},{5:[1,37]},{2:$V0,5:$V1,7:38,8:6,9:39,10:$V2,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{5:[2,3]},o($Vd,[2,8]),{2:$V0,5:[2,5],6:40,9:5,10:$V2,11:$V3,21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{11:[1,42]},o($Ve,[2,21]),o($Ve,[2,22]),o($Ve,[2,23]),{25:[1,43]},o($Ve,[2,25]),o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),{25:[1,44]},o($Ve,[2,30]),o($Ve,[2,31]),o($Ve,[2,32]),o($Ve,[2,33]),o($Ve,[2,34]),o($Ve,[2,35]),o($Ve,[2,36]),{16:[1,46],25:[1,45]},{41:[1,47]},{11:[1,49],74:48},o($Vf,[2,100]),{12:[1,50]},{12:[1,51]},{12:[1,52]},{15:[1,53]},{12:[1,58],41:[1,57],49:$Vg,50:$Vh,56:[1,56],78:59,83:$Vi},{12:[1,61]},{11:[2,83]},{11:[2,84]},{11:[2,85]},{1:[2,1]},{5:[2,2]},o($Vd,[2,7]),{2:$V0,5:$V1,7:62,8:6,9:39,10:$V2,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},o($Ve,[2,20]),{12:[1,63]},o($Ve,[2,24]),o($Ve,[2,29]),o($Ve,[2,37]),o($Ve,[2,38]),{42:[1,64]},{25:[1,65]},{17:67,18:$Vj,20:$Vk,25:$Vl,56:[1,66],78:68,83:$Vi},{14:[1,71]},{11:$Vm,12:$Vn,44:84,45:77,46:72,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{11:$Vm,12:$Vn,44:84,45:77,46:86,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{2:$V0,8:87,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{49:[1,88]},{50:[1,89]},{11:$Vm,12:$Vu,45:90,48:$Vp,50:$Vq},{95:[1,92]},{11:$Vm,12:$Vn,14:[1,94],38:93,39:95,44:96,45:97,46:98,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},o($Vf,[2,101],{20:[1,99]}),{11:$Vm,12:$Vn,43:100,44:101,45:102,46:103,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{11:[1,109],23:106,24:107,73:108,75:$V5,76:$V6,77:$V7,85:27,92:104,96:105},{5:[2,4]},{11:$Vv,13:110,14:[1,111]},{12:[1,113]},o([2,5,10,11,12,16,40,47,48,50,61,71,72,75,76,77,84,86,89,90,91],[2,82]),{57:[1,114]},{20:$Vw,25:$Vx,56:[1,115],78:116,83:$Vi},{20:[1,118],25:[2,87]},{11:$Vy,74:119},{79:121,80:$Vz,81:$VA,82:$VB},{25:[1,125]},{14:[1,126],59:$VC,60:$VD},{11:$Vm,12:$Vn,44:84,45:77,46:129,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},o($VE,[2,68]),{11:$Vm,12:$Vn,44:84,45:131,46:130,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},o($VF,[2,70]),o($VG,$VH,{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),{69:[1,142],70:[1,143]},o($VF,[2,80]),o($VF,[2,81]),o($VS,[2,52]),{11:$Vm,12:$Vu,45:144,48:$Vp,50:$Vq},o($VS,[2,60],{41:[1,145],56:[1,146]}),o($VF,[2,77]),o($VF,[2,51]),{14:[1,147],59:$VC,60:$VD},{2:$V0,11:$V3,16:[1,148],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},o($Vf,[2,109]),o($Vf,[2,110]),{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,57:[1,149]},{11:$Vm,12:$Vu,45:150,48:$Vp,50:$Vq},{12:[1,151]},{14:[1,152]},{25:[1,153]},{14:[2,42],20:[1,154]},o($VT,[2,48]),o($VT,[2,49],{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),o([14,20,25,57],[2,50],{59:$VC,60:$VD}),{11:[1,156],85:155},o($Vf,[2,98],{20:$VU}),o($VV,[2,44]),o($VV,[2,46],{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),o($VW,[2,47],{59:$VC,60:$VD}),{11:$Vm,12:$Vn,44:84,45:77,46:158,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{97:[1,159],98:[1,160]},o($VX,[2,112]),{25:[1,161]},{11:[1,162],74:48},o($VY,[2,126],{78:59,83:$Vi}),{14:[1,163]},{15:[1,164],17:165,18:[1,166]},{14:[2,17],17:167,18:$Vj,20:[1,168]},{11:$Vm,12:$Vn,43:169,44:101,45:102,46:103,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{25:[1,170],83:[1,171]},{57:[1,172]},{20:[1,173],25:[2,89]},{11:$Vy,74:174},{11:$Vy,74:175},{25:[2,90]},{17:176,18:$Vj,20:$Vk,25:$Vl,78:68,83:$Vi},o($VZ,[2,94]),o($VZ,[2,95]),o($VZ,[2,96]),o($VZ,[2,97]),o($Ve,[2,99]),{15:[1,177]},{11:$Vm,12:$Vn,44:84,45:77,46:178,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{11:$Vm,12:$Vn,44:84,45:77,46:179,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},o($VE,[2,67]),{14:[1,180],59:$VC,60:$VD},o($VG,$VH,{14:$V_,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,64:$VO,65:$VP,66:$VQ,67:$VR}),{11:$Vm,12:$Vu,45:182,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,45:183,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,45:184,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,45:185,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,45:186,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,45:187,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,45:188,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,45:189,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,45:190,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,45:191,48:$Vp,50:$Vq},{11:$Vm,12:$Vu,44:84,45:193,47:$Vo,48:$Vp,50:$Vq,63:194,68:192,71:$Vs,72:$Vt},{11:$Vm,12:$Vu,44:84,45:193,47:$Vo,48:$Vp,50:$Vq,63:194,68:195,71:$Vs,72:$Vt},o($V$,[2,57],{51:$VK,52:$VL,53:$VM,54:$VN}),{55:[1,196],58:[1,197]},{11:$Vm,12:$Vu,45:198,48:$Vp,50:$Vq},{15:[1,199]},{89:[1,200]},{83:[1,201]},{14:$V_,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN},{11:$Vm,12:$Vn,39:202,44:96,45:97,46:98,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{25:[1,203]},o($Ve,[2,40]),{11:$Vm,12:$Vn,38:204,39:95,44:96,45:97,46:98,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},o($Vf,[2,102]),{78:59,83:$Vi},{11:$Vm,12:$Vn,43:205,44:101,45:102,46:103,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{25:[1,206],59:$VC,60:$VD},{11:[1,207]},{11:[1,208]},o($VX,[2,113]),o($VY,[2,125],{78:68,17:176,18:$Vj,20:$Vk,25:$Vl,83:$Vi}),{15:[1,209],17:210,18:[1,211]},{2:$V0,8:212,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{15:[1,213]},{19:[1,214],79:121,80:$Vz,81:$VA,82:$VB},{14:[2,18],20:[1,215]},{11:$Vv,13:216,14:$V01},{14:[1,217],20:$VU},o($Ve,[2,116]),{56:[1,218]},{25:[1,219],83:[1,220]},{11:$Vy,74:221},{25:[2,92]},{25:[2,91]},{20:$Vw,25:$Vx,78:116,83:$Vi},{2:$V0,8:222,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},o($VE,[2,65]),o([14,20,25,57,60],[2,66],{59:$VC}),o($VE,[2,69]),o($VS,[2,61]),o($VE,[2,71],{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN}),o($VE,[2,72],{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN}),o($VE,[2,73],{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN}),o($VE,[2,74],{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN}),o($V$,[2,53],{51:$VK,52:$VL,53:$VM,54:$VN}),o($V$,[2,54],{51:$VK,52:$VL,53:$VM,54:$VN}),o($V11,[2,55],{53:$VM,54:$VN}),o($V11,[2,56],{53:$VM,54:$VN}),o([14,20,25,49,50,51,52,53,57,59,60,64,65,66,67,69,70],[2,58],{54:$VN}),o($VS,[2,59]),o($VE,[2,75]),o($VE,$VH,{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN}),o($VE,[2,79]),o($VE,[2,76]),o($VS,[2,62]),{12:[1,223]},{49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,57:[1,224]},{2:$V0,8:225,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{12:[1,226]},{11:$Vm,12:$Vn,39:227,44:96,45:97,46:98,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{14:[1,228]},o($Ve,[2,39]),{14:[2,41]},o($VW,[2,45]),{11:[1,232],24:231,30:230,85:27,93:229},{14:[1,233]},{14:[1,234]},{2:$V0,8:235,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{15:[1,236]},{19:[1,237],79:121,80:$Vz,81:$VA,82:$VB},{2:$V0,11:$V3,16:[1,238],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{2:$V0,8:239,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{15:[1,240]},{11:$Vv,13:241,14:$V01},{14:[2,16]},{25:[1,242]},{11:$Vm,12:$Vn,39:244,44:96,45:97,46:98,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt,94:243},o($Ve,[2,117]),{56:[1,245]},{25:[2,93]},{2:$V0,11:$V3,16:[1,246],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{14:[1,247]},o($VS,[2,63]),{2:$V0,11:$V3,16:[1,248],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{11:$Vm,12:$Vn,44:84,45:77,46:249,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt},{25:[1,250]},{25:[1,251]},{14:[1,252]},{14:[2,114]},{14:[2,115]},{49:$Vg,50:$Vh,78:59,83:$Vi},{15:[1,253]},{15:[1,254]},{2:$V0,11:$V3,16:[1,255],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{2:$V0,8:256,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{15:[1,257]},o($Vd,[2,10]),{2:$V0,11:$V3,16:[1,258],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{2:$V0,8:259,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{14:[2,15]},o($Ve,[2,43]),{57:[1,260]},{20:[1,261],57:[2,121]},{11:$Vm,12:$Vn,39:244,44:96,45:97,46:98,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt,94:262},o($Ve,[2,103],{87:263,88:[1,264]}),o($VS,[2,64]),o($Ve,[2,107]),{14:[1,265],59:$VC,60:$VD},o($Ve,[2,122]),o($Ve,[2,123]),{15:[1,266]},{2:$V0,8:267,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{2:$V0,8:268,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},o($Vd,[2,9]),{2:$V0,11:$V3,16:[1,269],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{2:$V0,8:270,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},o($Vd,[2,13]),{2:$V0,11:$V3,16:[1,271],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{25:[1,272]},{11:$Vm,12:$Vn,39:244,44:96,45:97,46:98,47:$Vo,48:$Vp,50:$Vq,61:$Vr,62:74,63:76,68:78,71:$Vs,72:$Vt,94:273},{57:[1,274]},o($Ve,[2,104]),{15:[1,276],27:275,86:$V9},o($Ve,[2,108]),{2:$V0,8:277,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{2:$V0,11:$V3,16:[1,278],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{2:$V0,11:$V3,16:[1,279],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},o($Vd,[2,11]),{2:$V0,11:$V3,16:[1,280],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},o($Vd,[2,14]),o($Ve,[2,118]),{57:[2,120]},{25:[1,281]},o($Ve,[2,105]),{2:$V0,8:282,11:$V3,21:8,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},{2:$V0,11:$V3,16:[1,283],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},o($Ve,[2,124]),o($Ve,[2,127]),o($Vd,[2,12]),o($Ve,[2,119]),{2:$V0,11:$V3,16:[1,284],21:41,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:23,40:$V4,73:26,75:$V5,76:$V6,77:$V7,84:$V8,85:27,86:$V9,89:$Va,90:$Vb,91:$Vc},o($Ve,[2,111]),o($Ve,[2,106])],
defaultActions: {4:[2,3],34:[2,83],35:[2,84],36:[2,85],37:[2,1],38:[2,2],62:[2,4],119:[2,90],174:[2,92],175:[2,91],204:[2,41],216:[2,16],221:[2,93],230:[2,114],231:[2,115],241:[2,15],273:[2,120]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Omitir espacios en blanco
break;
case 1://comentario simple línea
break;
case 2://comentario multiple líneas
break;
case 3:return 48;              //Reconocimiento de numeros
break;
case 4:return 40;
break;
case 5:return 42;
break;
case 6:return 72;
break;
case 7:return 71;
break;
case 8:yy_.yytext = yy_.yytext.slice(1,-1);  return 47;
break;
case 9:yy_.yytext = yy_.yytext.slice(1,-1);  return 47;
break;
case 10:return 82;
break;
case 11:return 80;
break;
case 12:return 81;
break;
case 13:return 10;
break;
case 14:return 19;
break;
case 15:return 76;
break;
case 16:return 75;
break;
case 17:return 77;
break;
case 18:return 'type';
break;
case 19:return 84;
break;
case 20:return 86;
break;
case 21:return 88;
break;
case 22:return 89;
break;
case 23:return 90;
break;
case 24:return 91;
break;
case 25:return 98;
break;
case 26:return 97;
break;
case 27:return 'continue';
break;
case 28:return 'break';
break;
case 29:return 'return';
break;
case 30:return 'switch';
break;
case 31:return 'case';
break;
case 32:return 'default';
break;
case 33:return 'type';
break;
case 34:return 55;
break;
case 35:return 58;
break;
case 36:return 95;
break;
case 37:return 67;
break;
case 38:return 66;
break;
case 39:return 65;
break;
case 40:return 64;
break;
case 41:return 69;
break;
case 42:return 70;
break;
case 43:return 59;
break;
case 44:return 60;
break;
case 45:return 61;
break;
case 46:return 53;
break;
case 47:return 'qEs';
break;
case 48:return 41;
break;
case 49:return 20;
break;
case 50:return 12;
break;
case 51:return 14;
break;
case 52:return 49;
break;
case 53:return 51;
break;
case 54:return 52;
break;
case 55:return 50;
break;
case 56:return 54;
break;
case 57:return 18;
break;
case 58:return 15;
break;
case 59:return 16;
break;
case 60:return 83;
break;
case 61:return 56;
break;
case 62:return 57;
break;
case 63:return 25;
break;
case 64:return 11;
break;
case 65:return 5;                 //End Of File
break;
case 66:reportarError("Lexico", "Caracter no reconocido por el lenguaje <br>"+yy_.yytext, yy_.yylloc.first_column, yy_.yylloc.first_line);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:[N|n]umber\b)/,/^(?:boolean\b)/,/^(?:[S|s]tring\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:graficar_ts\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:type\b)/,/^(?:length\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\*\*)/,/^(?:\?)/,/^(?:\.)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:%)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compilador;
exports.Parser = compilador.Parser;
exports.parse = function () { return compilador.parse.apply(compilador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}