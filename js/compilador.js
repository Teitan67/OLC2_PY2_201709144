/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compilador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[2,6],$V2=[1,7],$V3=[1,35],$V4=[1,28],$V5=[1,40],$V6=[1,41],$V7=[1,42],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,36],$Vd=[1,39],$Ve=[1,38],$Vf=[1,37],$Vg=[2,5,10,11,44,73,74,75,82,84,87,88,89,97,98,99],$Vh=[2,5,10,11,17,44,73,74,75,82,84,87,88,89,97,98,99,101,103],$Vi=[14,26],$Vj=[1,65],$Vk=[1,61],$Vl=[1,62],$Vm=[1,67],$Vn=[1,74],$Vo=[1,80],$Vp=[1,73],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,79],$Vu=[1,81],$Vv=[2,77],$Vw=[1,87],$Vx=[1,109],$Vy=[1,110],$Vz=[1,111],$VA=[1,112],$VB=[1,113],$VC=[1,114],$VD=[1,115],$VE=[1,116],$VF=[1,117],$VG=[1,118],$VH=[1,119],$VI=[1,120],$VJ=[1,121],$VK=[1,122],$VL=[14,18,21,26,50,56,57,58,59,60,61,62,63,65,66,67,68,69,70],$VM=[1,130],$VN=[2,74],$VO=[1,135],$VP=[1,136],$VQ=[1,137],$VR=[11,12,48,51,52,53,57,64],$VS=[14,18,21,26,50,56,57,62,63,65,66,67,68,69,70],$VT=[14,18,21,26,50,62,63],$VU=[14,21],$VV=[14,16,21,26,49,81],$VW=[2,106],$VX=[14,18,21,26,50,56,57,58,59,62,63,65,66,67,68,69,70],$VY=[14,18,21,26,50,62,63,65,66,67,68],$VZ=[14,18,21,26,50,62,63,65,66,67,68,69,70],$V_=[1,209];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"PROGRAMA":3,"PROGRAMA_ESTRUCTURA":4,"EOF":5,"FUNCIONES":6,"PROGRAMA_RECOLECTADO":7,"LSENTENCIAS":8,"FUNCION":9,"function":10,"id":11,"pa":12,"PARAMETROS":13,"pc":14,"VARIABLES_TIPO":15,"lla":16,"llc":17,"dspts":18,"void":19,"PARAMETROS_ID":20,"cm":21,"SENTENCIAS":22,"INST_CONSOLA":23,"INST_CREAR_VARIABLES":24,"INST_ASIGNAR_VARIABLES":25,"eos":26,"INST_GRAFICADOR":27,"INST_IF":28,"INST_WHILE":29,"INST_DO_WHILE":30,"INST_INCREMENTO":31,"INST_FOR":32,"INST_CREAR_ARREGLO":33,"INST_ASIGNAR_ARREGLO":34,"INST_PUSH":35,"INST_SWITCH":36,"INST_FOR_IN":37,"INST_BREAK":38,"INST_FOR_OF":39,"INST_FUNCION_LLAMADA":40,"INST_RETURN":41,"PARAMETRO_ENTRADA":42,"DATO":43,"console":44,"pt":45,"log":46,"IMPRESION":47,"numero":48,"ca":49,"cc":50,"cadena":51,"false":52,"true":53,"length":54,"pop":55,"mas":56,"menos":57,"por":58,"div":59,"potenciar":60,"modular":61,"and":62,"or":63,"not":64,"menor":65,"mayor":66,"menorIgual":67,"mayorIgual":68,"mismo":69,"diferente":70,"VARIABLES_ACCESO":71,"VARIABLES_CUERPO":72,"let":73,"var":74,"const":75,"VARIABLES_ASIGNACION":76,"TIPO_DATO":77,"boolean":78,"string":79,"number":80,"igual":81,"graficar_ts":82,"ASIGNACION":83,"if":84,"ELSE":85,"else":86,"while":87,"do":88,"for":89,"FOR_ASIGNACION":90,"FOR_AUMENTO":91,"ARREGLO_DATOS":92,"push":93,"FOR_IN_ASIGNACION":94,"in":95,"of":96,"return_":97,"break":98,"switch":99,"SWITCH_CUERPO":100,"case":101,"SWITCH_DEFAUTL":102,"default":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"function",11:"id",12:"pa",14:"pc",16:"lla",17:"llc",18:"dspts",19:"void",21:"cm",26:"eos",44:"console",45:"pt",46:"log",48:"numero",49:"ca",50:"cc",51:"cadena",52:"false",53:"true",54:"length",55:"pop",56:"mas",57:"menos",58:"por",59:"div",60:"potenciar",61:"modular",62:"and",63:"or",64:"not",65:"menor",66:"mayor",67:"menorIgual",68:"mayorIgual",69:"mismo",70:"diferente",73:"let",74:"var",75:"const",78:"boolean",79:"string",80:"number",81:"igual",82:"graficar_ts",84:"if",86:"else",87:"while",88:"do",89:"for",93:"push",95:"in",96:"of",97:"return_",98:"break",99:"switch",101:"case",103:"default"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[7,0],[6,2],[6,1],[9,9],[9,10],[13,1],[13,0],[20,4],[20,2],[8,2],[8,1],[22,1],[22,1],[22,2],[22,1],[22,1],[22,1],[22,1],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,1],[22,2],[22,2],[40,3],[40,4],[42,3],[42,1],[23,7],[47,3],[47,1],[43,1],[43,1],[43,4],[43,1],[43,1],[43,1],[43,3],[43,5],[43,1],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[24,3],[71,1],[71,1],[71,1],[72,2],[72,3],[15,2],[15,0],[77,1],[77,1],[77,1],[76,2],[27,4],[25,1],[83,2],[83,4],[28,7],[28,8],[85,2],[85,4],[29,7],[30,8],[31,3],[31,3],[32,10],[90,1],[90,2],[91,1],[91,1],[33,6],[33,10],[92,3],[92,1],[34,7],[35,7],[37,9],[94,2],[94,1],[39,9],[41,3],[41,2],[38,2],[36,7],[100,5],[100,5],[100,4],[102,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return instruccionesAST.nuevoPrograma($$[$0-1]);
break;
case 2:
$$[$0].unshift($$[$0-1]); this.$=$$[$0];
break;
case 3: case 11: case 17: case 18: case 20: case 21: case 22: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 34: case 52: case 95: case 97: case 98:
this.$=$$[$0];
break;
case 4:
$$[$0].unshift($$[$0-2]); $$[$0].unshift($$[$0-1]); this.$=$$[$0];
break;
case 5: case 8: case 40:
this.$=[$$[$0]];
break;
case 6: case 12:
this.$=[];
break;
case 7:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 9:
this.$=instruccionesAST.nuevaFuncionCreada($$[$0-7],$$[$0-5],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 10:
this.$=instruccionesAST.nuevaFuncionCreada($$[$0-8],$$[$0-6],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 13:
$$[$0].unshift(instruccionesAST.nuevoParametro($$[$0-3],$$[$0-2])); this.$=$$[$0];
break;
case 14:
this.$=[instruccionesAST.nuevoParametro($$[$0-1],$$[$0])];
break;
case 15:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 16:
 this.$ = [$$[$0]]; 
break;
case 19: case 24: case 33: case 96:
this.$=$$[$0-1];
break;
case 35: case 36:
this.$=instruccionesAST.saltoError(); reportarError("Sintactico", "Linea mal escrita:<br>"+editor.getLine(this._$.first_line-1),this._$.first_line-1 ,this._$.first_column);
break;
case 37:
this.$=instruccionesAST.nuevaFuncionLlamada($$[$0-2],[],this._$.first_line-1,this._$.first_column);
break;
case 38:
this.$=instruccionesAST.nuevaFuncionLlamada($$[$0-3],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 39:
$$[$0].unshift($$[$0-2]); this.$=$$[$0];
break;
case 41:
 this.$ = instruccionesAST.nuevoImprimir($$[$0-2]);
break;
case 42:
 this.$=instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.CONCATENACION);
break;
case 43:
 this.$=$$[$0];
break;
case 44:
 this.$ = instruccionesAST.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO,this._$.first_line-1,this._$.first_column); 
break;
case 45:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR,this._$.first_line-1,this._$.first_column);
break;
case 46:
 this.$ = instruccionesAST.nuevoValorArreglo($$[$0-3],$$[$0-1], TIPO_VALOR.ARREGLO,this._$.first_line-1,this._$.first_column);
break;
case 47:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.CADENA,this._$.first_line-1,this._$.first_column);
break;
case 48:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.BOOLEANO,this._$.first_line-1,this._$.first_column);
break;
case 49:
 this.$ = instruccionesAST.nuevoValor($$[$0],TIPO_VALOR.BOOLEANO,this._$.first_line-1,this._$.first_columns);
break;
case 50:
 this.$ = instruccionesAST.nuevoLength($$[$0-2]);
break;
case 51:
 this.$ = instruccionesAST.nuevoPop($$[$0-4], TIPO_VALOR.POP,this._$.first_line-1,this._$.first_column);
break;
case 53:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAS);
break;
case 54:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA);
break;
case 55:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION);
break;
case 56:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION);
break;
case 57:
 this.$ = instruccionesAST.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 58:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA);
break;
case 59:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULAR);
break;
case 60:
 this.$ = $$[$0-1];
break;
case 61:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND);
break;
case 62:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR);
break;
case 63:
 this.$ = instruccionesAST.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NEGACION);
break;
case 64:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE);
break;
case 65:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE);
break;
case 66:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL);
break;
case 67:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL);
break;
case 68:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUAL);
break;
case 69:
 this.$ = instruccionesAST.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIFERENTE);
break;
case 70:
 this.$ = instruccionesAST.nuevaVariable($$[$0-2],$$[$0-1]); 
break;
case 71: case 72: case 73: case 88:
this.$ = $$[$0];
break;
case 74:
 this.$ = [ instruccionesAST.crearVariable($$[$0-1],$$[$0],null,this._$.first_line-1,this._$.first_column) ];
break;
case 75:
 this.$ = [ instruccionesAST.crearVariable($$[$0-2],$$[$0-1],$$[$0],this._$.first_line-1,this._$.first_column) ];
break;
case 76: case 78: case 79: case 80: case 81: case 106: case 107:
 this.$ = $$[$0];
break;
case 77:
 this.$ = null;
break;
case 82:
 this.$ = instruccionesAST.graficar_ts(); 
break;
case 83:
 this.$ = instruccionesAST.nuevasAsignaciones($$[$0]);
break;
case 84:
 this.$ = [instruccionesAST.nuevaAsignacion($$[$0-1],$$[$0],this._$.first_line-1,this._$.first_column)];
break;
case 85:
 $$[$0].push(instruccionesAST.nuevaAsignacion($$[$0-3],$$[$0-2],this._$.first_line-1,this._$.first_column)); this.$ = $$[$0];
break;
case 86:
 this.$ = instruccionesAST.nuevoIf($$[$0-4],$$[$0-1],"null");
break;
case 87:
 this.$ = instruccionesAST.nuevoIf($$[$0-5],$$[$0-2],$$[$0])
break;
case 89:
this.$ = instruccionesAST.nuevoElse($$[$0-1]);
break;
case 90:
 this.$ = instruccionesAST.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 91:
 this.$ = instruccionesAST.nuevoDoWhile($$[$0-1],$$[$0-5]);
break;
case 92:
 this.$ = instruccionesAST.nuevoIncremento($$[$0-2]);
break;
case 93:
 this.$ = instruccionesAST.nuevoDecremento($$[$0-2]);
break;
case 94:
this.$ = instruccionesAST.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 99:
this.$=instruccionesAST.nuevoArreglo($$[$0-5],$$[$0-4],$$[$0-3],[],this._$.first_line-1,this._$.first_column);
break;
case 100:
this.$=instruccionesAST.nuevoArreglo($$[$0-9],$$[$0-8],$$[$0-7],$$[$0-2],this._$.first_line-1,this._$.first_column);
break;
case 101:
 $$[$0].unshift($$[$0-2]); this.$ = $$[$0];
break;
case 102:
 this.$ = [$$[$0]];
break;
case 103:
 this.$ = instruccionesAST.nuevaAsignacionArreglo($$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line-1,this._$.first_column);
break;
case 104:
 this.$ = instruccionesAST.nuevoPush($$[$0-6],$$[$0-2]);
break;
case 105:
 this.$ =instruccionesAST.nuevoForIn($$[$0-6],$$[$0-4],$$[$0-1]) ;
break;
case 108:
 this.$ =instruccionesAST.nuevoForOf($$[$0-6],$$[$0-4],$$[$0-1]) ;
break;
case 109:
this.$=instruccionesAST.nuevoReturn($$[$0-1]);
break;
case 110:
this.$=instruccionesAST.nuevoReturn(null);
break;
case 111:
this.$=instruccionesAST.nuevoBreak();
break;
case 112:
this.$=instruccionesAST.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 113: case 114:
$$[$0].push(instruccionesAST.nuevoCase($$[$0-3],$$[$0-1]));this.$=$$[$0];
break;
case 115: case 116:
this.$=[instruccionesAST.nuevoCase($$[$0-2],$$[$0])];
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,8:6,9:5,10:$V2,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{1:[3]},{5:[1,43]},{2:$V0,5:$V1,7:44,8:6,9:45,10:$V2,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{5:[2,3]},o($Vg,[2,8]),{2:$V0,5:[2,5],6:46,9:5,10:$V2,11:$V3,22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{11:[1,48]},o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),{26:[1,49]},o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),{26:[1,50]},o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,28]),o($Vh,[2,29]),o($Vh,[2,30]),o($Vh,[2,31]),o($Vh,[2,32]),{26:[1,51]},o($Vh,[2,34]),{17:[1,53],26:[1,52]},{45:[1,54]},{11:[1,56],72:55},o($Vi,[2,83]),{12:[1,57]},{12:[1,58]},{12:[1,59]},{16:[1,60]},{12:$Vj,45:[1,64],49:[1,63],56:$Vk,57:$Vl,76:66,81:$Vm},{12:[1,68]},{12:[1,69]},{26:[1,70]},{11:$Vn,12:$Vo,26:[1,72],40:78,43:71,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:[2,71]},{11:[2,72]},{11:[2,73]},{1:[2,1]},{5:[2,2]},o($Vg,[2,7]),{2:$V0,5:$V1,7:82,8:6,9:45,10:$V2,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},o($Vh,[2,15]),{12:[1,83]},o($Vh,[2,19]),o($Vh,[2,24]),o($Vh,[2,33]),o($Vh,[2,35]),o($Vh,[2,36]),{46:[1,84]},{26:[1,85]},o([26,49,81],$Vv,{15:86,18:$Vw}),{14:[1,88]},{11:$Vn,12:$Vo,40:78,43:89,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:90,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{2:$V0,8:91,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{56:[1,92]},{57:[1,93]},{11:$Vn,12:$Vo,40:78,43:94,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{93:[1,95]},{11:$Vn,12:$Vo,14:[1,96],40:78,42:97,43:98,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},o($Vi,[2,84],{21:[1,99]}),{11:$Vn,12:$Vo,40:78,43:100,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:[1,106],24:103,25:104,71:105,73:$V5,74:$V6,75:$V7,83:30,90:101,94:102},{11:$Vn,12:$Vo,40:78,43:107,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},o($Vh,[2,111]),{26:[1,108],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($Vh,[2,110]),o($VL,[2,44]),o($VL,[2,45],{12:$Vj,45:[1,124],49:[1,123]}),o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,52]),{11:$Vn,12:$Vo,40:78,43:125,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:126,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:127,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{5:[2,4]},{11:$VM,13:128,14:[2,12],20:129},{12:[1,131]},o([2,5,10,11,12,17,44,48,51,52,53,57,64,73,74,75,82,84,87,88,89,97,98,99,101,103],[2,70]),{26:$VN,49:[1,132],76:133,81:$Vm},{77:134,78:$VO,79:$VP,80:$VQ},{26:[1,138]},{14:[1,139],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{14:[1,140],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{2:$V0,11:$V3,17:[1,141],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},o($Vi,[2,92]),o($Vi,[2,93]),{50:[1,142],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{12:[1,143]},o($VL,[2,37]),{14:[1,144]},{14:[2,40],21:[1,145],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{11:[1,147],83:146},o([14,21,26],[2,81],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),{11:$Vn,12:$Vo,40:78,43:148,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{95:[1,149],96:[1,150]},o($VR,[2,95]),{26:[1,151]},{11:[1,152],72:55},o([95,96],[2,107],{76:66,81:$Vm}),{14:[1,153],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($Vh,[2,109]),{11:$Vn,12:$Vo,40:78,43:154,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:155,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:156,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:157,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:158,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:159,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:160,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:161,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:162,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:163,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:164,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:165,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:166,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:167,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{11:$Vn,12:$Vo,40:78,43:168,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{54:[1,169],55:[1,170]},o($VS,[2,57],{58:$Vz,59:$VA,60:$VB,61:$VC}),{14:[1,171],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($VT,[2,63],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),{14:[1,172]},{14:[2,11]},o($VU,$Vv,{15:173,18:$Vw}),{11:$Vn,12:$Vo,40:78,43:175,47:174,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{50:[1,176]},{26:[2,75]},o($VV,[2,76]),o($VV,[2,78]),o($VV,[2,79]),o($VV,[2,80]),o($Vh,[2,82]),{16:[1,177]},{16:[1,178]},{87:[1,179]},{81:[1,180]},{11:$Vn,12:$Vo,40:78,43:181,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},o($VL,[2,38]),{11:$Vn,12:$Vo,40:78,42:182,43:98,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},o($Vi,[2,85]),{76:66,81:$Vm},{26:[1,183],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{11:[1,184]},{11:[1,185]},o($VR,[2,96]),o([26,81],$Vv,{15:186,18:$Vw,95:$VW,96:$VW}),{16:[1,187]},o($VS,[2,53],{58:$Vz,59:$VA,60:$VB,61:$VC}),o($VS,[2,54],{58:$Vz,59:$VA,60:$VB,61:$VC}),o($VX,[2,55],{60:$VB,61:$VC}),o($VX,[2,56],{60:$VB,61:$VC}),o([14,18,21,26,50,56,57,58,59,60,62,63,65,66,67,68,69,70],[2,58],{61:$VC}),o($VL,[2,59]),o($VT,[2,61],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o([14,18,21,26,50,63],[2,62],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($VY,[2,64],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VJ,70:$VK}),o($VY,[2,65],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VJ,70:$VK}),o($VY,[2,66],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VJ,70:$VK}),o($VY,[2,67],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,69:$VJ,70:$VK}),o($VZ,[2,68],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o($VZ,[2,69],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),{50:[1,188],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($VL,[2,50]),{12:[1,189]},o($VL,[2,60]),{15:190,16:$Vv,18:[1,191]},{14:[2,14],21:[1,192]},{14:[1,193],21:[1,194]},o($VU,[2,43],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),{26:[1,195],81:[1,196]},{2:$V0,8:197,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{2:$V0,8:198,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{12:[1,199]},{11:$Vn,12:$Vo,40:78,43:200,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{14:[1,201],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{14:[2,39]},{11:[1,205],25:204,31:203,83:30,91:202},{14:[1,206]},{14:[1,207]},{26:$VN,76:133,81:$Vm},{100:208,101:$V_},o($VL,[2,46]),{14:[1,210]},{16:[1,211]},{19:[1,212],77:134,78:$VO,79:$VP,80:$VQ},{11:$VM,20:213},{26:[1,214]},{11:$Vn,12:$Vo,40:78,43:175,47:215,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},o($Vh,[2,99]),{49:[1,216]},{2:$V0,11:$V3,17:[1,217],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{2:$V0,11:$V3,17:[1,218],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{11:$Vn,12:$Vo,40:78,43:219,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},{26:[1,220],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{26:[1,221]},{14:[1,222]},{14:[2,97]},{14:[2,98]},{56:$Vk,57:$Vl,76:66,81:$Vm},{16:[1,223]},{16:[1,224]},{17:[1,225]},{11:$Vn,12:$Vo,40:78,43:226,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu},o($VL,[2,51]),{2:$V0,8:227,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{16:[1,228]},{14:[2,13]},o($Vh,[2,41]),o($VU,[2,42]),{11:$Vn,12:$Vo,40:78,43:230,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu,92:229},o($Vh,[2,86],{85:231,86:[1,232]}),o($Vh,[2,90]),{14:[1,233],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($Vh,[2,103]),o($Vh,[2,104]),{16:[1,234]},{2:$V0,8:235,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{2:$V0,8:236,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},o($Vh,[2,112]),{18:[1,237],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{2:$V0,11:$V3,17:[1,238],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{2:$V0,8:239,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{50:[1,240]},{21:[1,241],50:[2,102],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($Vh,[2,87]),{16:[1,243],28:242,84:$V9},o($Vh,[2,91]),{2:$V0,8:244,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{2:$V0,11:$V3,17:[1,245],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{2:$V0,11:$V3,17:[1,246],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{2:$V0,8:247,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},o($Vg,[2,9]),{2:$V0,11:$V3,17:[1,248],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{26:[1,249]},{11:$Vn,12:$Vo,40:78,43:230,48:$Vp,51:$Vq,52:$Vr,53:$Vs,57:$Vt,64:$Vu,92:250},o($Vh,[2,88]),{2:$V0,8:251,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{2:$V0,11:$V3,17:[1,252],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},o($Vh,[2,105]),o($Vh,[2,108]),{2:$V0,11:$V3,17:[2,115],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf,100:253,101:$V_,102:254,103:[1,255]},o($Vg,[2,10]),o($Vh,[2,100]),{50:[2,101]},{2:$V0,11:$V3,17:[1,256],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},o($Vh,[2,94]),{17:[2,113]},{17:[2,114]},{18:[1,257]},o($Vh,[2,89]),{2:$V0,8:258,11:$V3,22:8,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf},{2:$V0,11:$V3,17:[2,116],22:47,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:23,39:24,40:25,41:26,44:$V4,71:29,73:$V5,74:$V6,75:$V7,82:$V8,83:30,84:$V9,87:$Va,88:$Vb,89:$Vc,97:$Vd,98:$Ve,99:$Vf}],
defaultActions: {4:[2,3],40:[2,71],41:[2,72],42:[2,73],43:[2,1],44:[2,2],82:[2,4],129:[2,11],133:[2,75],182:[2,39],203:[2,97],204:[2,98],213:[2,13],250:[2,101],253:[2,113],254:[2,114]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Omitir espacios en blanco
break;
case 1://comentario simple línea
break;
case 2://comentario multiple líneas
break;
case 3:return 48;              //Reconocimiento de numeros
break;
case 4:return 44;
break;
case 5:return 46;
break;
case 6:return 53;
break;
case 7:return 52;
break;
case 8:yy_.yytext = yy_.yytext.slice(1,-1);  return 51;
break;
case 9:yy_.yytext = yy_.yytext.slice(1,-1);  return 51;
break;
case 10:return 80;
break;
case 11:return 78;
break;
case 12:return 79;
break;
case 13:return 10;
break;
case 14:return 19;
break;
case 15:return 74;
break;
case 16:return 73;
break;
case 17:return 75;
break;
case 18:return 'type';
break;
case 19:return 82;
break;
case 20:return 84;
break;
case 21:return 86;
break;
case 22:return 87;
break;
case 23:return 88;
break;
case 24:return 89;
break;
case 25:return 96;
break;
case 26:return 95;
break;
case 27:return 'continue';
break;
case 28:return 98;
break;
case 29:return 97;
break;
case 30:return 99;
break;
case 31:return 101;
break;
case 32:return 103;
break;
case 33:return 'type';
break;
case 34:return 54;
break;
case 35:return 55;
break;
case 36:return 93;
break;
case 37:return 68;
break;
case 38:return 67;
break;
case 39:return 66;
break;
case 40:return 65;
break;
case 41:return 69;
break;
case 42:return 70;
break;
case 43:return 62;
break;
case 44:return 63;
break;
case 45:return 64;
break;
case 46:return 60;
break;
case 47:return 'qEs';
break;
case 48:return 45;
break;
case 49:return 21;
break;
case 50:return 12;
break;
case 51:return 14;
break;
case 52:return 56;
break;
case 53:return 58;
break;
case 54:return 59;
break;
case 55:return 57;
break;
case 56:return 61;
break;
case 57:return 18;
break;
case 58:return 16;
break;
case 59:return 17;
break;
case 60:return 81;
break;
case 61:return 49;
break;
case 62:return 50;
break;
case 63:return 26;
break;
case 64:return 11;
break;
case 65:return 5;                 //End Of File
break;
case 66:reportarError("Lexico", "Caracter no reconocido por el lenguaje <br>"+yy_.yytext, yy_.yylloc.first_column, yy_.yylloc.first_line);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:[N|n]umber\b)/,/^(?:boolean\b)/,/^(?:[S|s]tring\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:graficar_ts\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:type\b)/,/^(?:length\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\*\*)/,/^(?:\?)/,/^(?:\.)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:%)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compilador;
exports.Parser = compilador.Parser;
exports.parse = function () { return compilador.parse.apply(compilador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}